## Success paths

# Test basic init convert success
mkdir convert-basic
cd convert-basic
exec git init
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec grove init convert
stdout 'Repository successfully converted to Grove workspace'
stdout 'convert-basic'
exists .bare
exists .git
exists main/test-file.txt
cd ..

# Test basic init convert with realistic directory structure
mkdir convert-realistic
cd convert-realistic
exec git init
mkdir -p .github/workflows docs/api src/components
exec sh -c 'echo "name: CI" > .github/workflows/ci.yml'
exec sh -c 'echo "API docs" > docs/api/README.md'
exec sh -c 'echo "package main" > src/main.go'
exec sh -c 'echo "export default {}" > src/components/Button.tsx'
exec git add .
exec git commit -m 'initial commit'
exec grove init convert
stdout 'Repository successfully converted to Grove workspace'
stdout 'convert-realistic'
# Verify files moved to worktree
exists main/.github/workflows/ci.yml
exists main/docs/api/README.md
exists main/src/main.go
exists main/src/components/Button.tsx
# CRITICAL: Verify root directory is clean
! exists .github
! exists docs
! exists src
# Verify only expected items in root
exec sh -c 'ls -a | wc -l'
stdout '^5$'
cd ..

# Test init convert with --branches flag
mkdir convert-branches
cd convert-branches
exec git init
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b develop
exec git checkout -b 'feat/user-auth'
exec git checkout main
exec grove init convert --branches main,develop,feat/user-auth
stdout 'Repository successfully converted to Grove workspace'
stdout 'convert-branches'
stdout 'Creating worktrees'
stdout '✓ develop'
stdout '✓ feat-user-auth'
exists .bare
exists .git
exists main/test-file.txt
exists develop
exists feat-user-auth
# All worktrees get checked out with their respective branch content
exists develop/test-file.txt
exists feat-user-auth/test-file.txt
cd ..

# TODO: Test init convert copies untracked files to worktrees (not yet implemented)
# mkdir convert-untracked
# cd convert-untracked
# exec git init
# cp ../test-file.txt .
# exec git add .
# exec git commit -m 'initial commit'
# exec git checkout -b develop
# exec git checkout main
# cp ../untracked.txt .
# exec grove init convert --branches main,develop
# stdout 'Repository successfully converted to Grove workspace'
# stdout 'convert-untracked'
# stdout 'Creating worktrees:'
# stdout '✓ main'
# stdout '✓ develop'
# stdout 'Copying untracked files'
# exists main/test-file.txt
# exists main/untracked.txt
# exists develop/test-file.txt
# exists develop/untracked.txt
# cd ..

# Test init convert with mixed tracked and untracked files
mkdir convert-mixed-files
cd convert-mixed-files
exec git init
mkdir src build
exec sh -c 'echo "tracked code" > src/main.go'
exec sh -c 'echo "tracked test" > src/main_test.go'
exec git add src/
exec git commit -m 'tracked files'
# Add untracked files
exec sh -c 'echo "NODE_ENV=development" > .env'
exec sh -c 'echo "output" > build/main.js'
mkdir -p node_modules/package
exec sh -c 'echo "{}" > node_modules/package/package.json'
exec grove init convert
stdout 'Repository successfully converted to Grove workspace'
stdout 'convert-mixed-files'
# Verify tracked files moved
exists main/src/main.go
exists main/src/main_test.go
# Verify untracked files moved
exists main/.env
exists main/build/main.js
exists main/node_modules/package/package.json
# CRITICAL: Verify root directory is clean
! exists src
! exists .env
! exists build
! exists node_modules
# Count root items (should be exactly 5: ., .., .bare, .git, main)
exec sh -c 'ls -a | wc -l'
stdout '^5$'
cd ..

# Test init convert file integrity check
mkdir convert-integrity
cd convert-integrity
exec git init
mkdir -p deep/nested/structure
exec sh -c 'echo "level1" > file1.txt'
exec sh -c 'echo "level2" > deep/file2.txt'
exec sh -c 'echo "level3" > deep/nested/file3.txt'
exec sh -c 'echo "level4" > deep/nested/structure/file4.txt'
exec git add .
exec git commit -m 'nested structure'
# Count files before convert (excluding git internals)
exec sh -c 'find . -type f ! -path "./.git/*" | wc -l > ../before_count.txt'
exec grove init convert
# Count files after convert in worktree (excluding .git file created during conversion)
exec sh -c 'find main -type f ! -path "*/.git/*" ! -name ".git" | wc -l > ../after_count.txt'
# Files should match
exec diff ../before_count.txt ../after_count.txt
# Verify structure preserved
exists main/file1.txt
exists main/deep/file2.txt
exists main/deep/nested/file3.txt
exists main/deep/nested/structure/file4.txt
# Root should be clean
! exists file1.txt
! exists deep
cd ..

## Complex merge/conflict scenarios

# Test init convert with ongoing merge fails
mkdir convert-merge
cd convert-merge
exec git init
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b branch2
exec sh -c 'echo "conflict" > test-file.txt'
exec git add .
exec git commit -m 'conflict'
exec git checkout main
exec sh -c 'echo "other" > test-file.txt'
exec git add .
exec git commit -m 'other'
! exec git merge branch2
! exec grove init convert
stderr 'cannot convert: repository has unresolved conflicts'
cd ..

# Test init convert fails when unresolved conflicts are present
mkdir convert-conflicts
cd convert-conflicts
exec git init
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b conflict-branch
exec sh -c 'echo "conflict content" > test-file.txt'
exec git add .
exec git commit -m 'conflict commit'
exec git checkout main
exec sh -c 'echo "main content" > test-file.txt'
exec git add .
exec git commit -m 'main commit'
! exec git merge conflict-branch
exec git reset --hard HEAD
! exec git merge --no-commit conflict-branch
! exec grove init convert
stderr 'cannot convert: repository has unresolved conflicts'
cd ..

-- test-file.txt --
This is a test file

-- untracked.txt --
This file is untracked
