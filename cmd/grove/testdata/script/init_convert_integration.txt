## Success paths

# Test basic init convert success
mkdir convert-basic
cd convert-basic
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec grove init convert
stdout 'Converted to Grove workspace'
stdout 'convert-basic'
exists .bare
exists .git
exists main/test-file.txt
cd ..

# Test init convert with --branches flag
mkdir convert-branches
cd convert-branches
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b develop
exec git checkout -b 'feat/user-auth'
exec git checkout main
exec grove init convert --branches main,develop,feat/user-auth
stdout 'Converted to Grove workspace'
stdout 'convert-branches'
stdout 'Creating worktrees:'
stdout '✓ main'
stdout '✓ develop'
stdout '✓ feat-user-auth'
exists .bare
exists .git
exists main/test-file.txt
exists develop/test-file.txt
exists feat-user-auth/test-file.txt
cd ..

# Test init convert copies untracked files to worktrees
mkdir convert-untracked
cd convert-untracked
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b develop
exec git checkout main
cp ../untracked.txt .
exec grove init convert --branches main,develop
stdout 'Converted to Grove workspace'
stdout 'convert-untracked'
stdout 'Creating worktrees:'
stdout '✓ main'
stdout '✓ develop'
stdout 'Copying untracked files'
exists main/test-file.txt
exists main/untracked.txt
exists develop/test-file.txt
exists develop/untracked.txt
cd ..

## Complex merge/conflict scenarios

# Test init convert with ongoing merge fails
mkdir convert-merge
cd convert-merge
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b branch2
exec sh -c 'echo "conflict" > test-file.txt'
exec git add .
exec git commit -m 'conflict'
exec git checkout main
exec sh -c 'echo "other" > test-file.txt'
exec git add .
exec git commit -m 'other'
! exec git merge branch2
! exec grove init convert
stderr 'cannot convert: repository has ongoing merge/rebase/cherry-pick'
cd ..

# Test init convert fails when unresolved conflicts are present
mkdir convert-conflicts
cd convert-conflicts
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b conflict-branch
exec sh -c 'echo "conflict content" > test-file.txt'
exec git add .
exec git commit -m 'conflict commit'
exec git checkout main
exec sh -c 'echo "main content" > test-file.txt'
exec git add .
exec git commit -m 'main commit'
! exec git merge conflict-branch
exec git reset --hard HEAD
exec git merge --no-commit conflict-branch
! exec grove init convert
stderr 'cannot convert: unresolved merge conflicts present'
cd ..

-- test-file.txt --
This is a test file

-- untracked.txt --
This file is untracked