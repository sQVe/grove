# =============================================================================
# grove init command tests
# =============================================================================

# Test init command help
exec grove init --help
stdout 'init'

# Test init command execution shows help
exec grove init
stdout 'Usage:'

# Test init rejects arguments
! exec grove init invalid
stderr 'unknown command'

# =============================================================================
# grove init new command tests
# =============================================================================

# Test init new command help
exec grove init new --help
stdout 'new'

# Test init new creates workspace in temp directory
mkdir temp1
exec grove init new temp1
exists temp1/.bare
exists temp1/.git

# Test init new creates workspace with directory name
mkdir temp2
exec grove init new temp2/myproject
exists temp2/myproject/.bare
exists temp2/myproject/.git

# Test init new fails with too many arguments
! exec grove init new dir1 dir2
stderr 'accepts at most 1 arg'

# Test init new fails when directory is not empty
mkdir temp3
cp existing.txt temp3/existing.txt
! exec grove init new temp3
stderr 'not empty'

# Test init new fails inside existing grove workspace
mkdir workspace1
exec grove init new workspace1
cd workspace1
! exec grove init new
stderr 'cannot initialize grove inside existing grove workspace'
cd ..

# Test init new with directory fails when directory is inside existing grove workspace
mkdir workspace2
exec grove init new workspace2
! exec grove init new workspace2/nested
stderr 'cannot initialize grove inside existing grove workspace'

# =============================================================================
# grove init clone command tests
# =============================================================================

# Test init clone command help
exec grove init clone --help
stdout 'clone'

# Test init clone with --branches flag help
exec grove init clone --help
stdout '--branches'

# Test init clone with single branch
mkdir clone-single-branch
! exec grove init clone file:///test/repo.git clone-single-branch --branches "main"
stderr 'failed to clone repository'

# Test init clone with multiple branches
mkdir clone-multi-branch
! exec grove init clone file:///test/repo.git clone-multi-branch --branches "main,develop,feat/test"
stderr 'failed to clone repository'

# Test init clone with --branches in current directory
mkdir clone-branches-current
cd clone-branches-current
! exec grove init clone file:///test/repo.git --branches "main"
stderr 'failed to clone repository'
cd ..

# Test init clone in current directory fails due to network
mkdir clone-current
cd clone-current
! exec grove init clone file:///nonexistent/repo.git
stderr 'failed to clone repository'
cd ..

# Test init clone with URL and directory fails if directory doesn't exist
! exec grove init clone file:///nonexistent/repo.git nonexistent
stderr 'failed to clone repository'

# Test init clone without arguments fails
! exec grove init clone
stderr 'accepts between 1 and 2 arg'

# Test init clone with too many arguments fails
! exec grove init clone url dir extra
stderr 'accepts between 1 and 2 arg'

# Test init clone with invalid URL fails
mkdir clone-invalid-url
! exec grove init clone not-a-url clone-invalid-url
stderr 'failed to clone repository'

# Test init clone with valid URL fails in non-empty directory
! exec grove init clone file:///nonexistent/repo.git
stderr 'not empty'

# Test init clone fails when current directory is not empty
mkdir clone-not-empty
cp existing.txt clone-not-empty/existing.txt
cd clone-not-empty
! exec grove init clone file:///nonexistent/repo.git
stderr 'not empty'
cd ..

# Test init clone fails when specified directory is not empty
mkdir clone-dir-not-empty
cp existing.txt clone-dir-not-empty/existing.txt
! exec grove init clone file:///nonexistent/repo.git clone-dir-not-empty
stderr 'not empty'

# Test init clone fails when current directory is a Git repository
mkdir clone-git-repo
cd clone-git-repo
exec git init
! exec grove init clone file:///nonexistent/repo.git
stderr 'cannot initialize grove inside existing git repository'
cd ..

# Test init clone fails when specified directory is a Git repository
mkdir clone-dir-git-repo
cd clone-dir-git-repo
exec git init
cd ..
! exec grove init clone file:///nonexistent/repo.git clone-dir-git-repo
stderr 'cannot initialize grove inside existing git repository'

# Test init clone fails inside existing grove workspace
mkdir workspace3
exec grove init new workspace3
cd workspace3
! exec grove init clone file:///nonexistent/repo.git
stderr 'cannot initialize grove inside existing grove workspace'
cd ..

# Test init clone with directory fails when directory is inside existing grove workspace
mkdir workspace4
exec grove init new workspace4
! exec grove init clone file:///nonexistent/repo.git workspace4/nested
stderr 'cannot initialize grove inside existing grove workspace'

# Test init clone with invalid branch names
mkdir clone-invalid-branch
! exec grove init clone file:///test/repo.git clone-invalid-branch --branches "nonexistent"
stderr 'failed to clone repository'

# Test init clone with empty branches flag
mkdir clone-empty-branches
! exec grove init clone file:///test/repo.git clone-empty-branches --branches ""
stderr 'no branches specified'

# =============================================================================
# grove init clone success path test
# =============================================================================

# Test successful clone with branches
mkdir testrepo
exec git init testrepo
cd testrepo
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config user.signingkey ""
exec git config commit.gpgsign false
cp ../README.md .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b develop
cd ..

mkdir test-workspace
exec grove init clone file://$WORK/testrepo test-workspace --branches master,develop
exists test-workspace/.bare
exists test-workspace/.git
exists test-workspace/master
exists test-workspace/develop
exists test-workspace/master/README.md
exists test-workspace/develop/README.md

# =============================================================================
# grove init clone output format tests
# =============================================================================

# Test clone output shows worktree creation by default (quiet mode)
mkdir test-output-quiet
exec grove init clone file://$WORK/testrepo test-output-quiet --branches master,develop
stdout 'Cloning repository...'
stdout 'Repository cloned'
stdout 'Creating worktrees:'
stdout '  ✓ master'
stdout '  ✓ develop'
! stdout 'Enumerating objects'
! stdout 'Counting objects'
! stdout 'Compressing objects'
! stdout 'Receiving objects'

# Test clone with branch name sanitization output
cd testrepo
exec git checkout -b feat/user-auth
cd ..
mkdir test-output-sanitized
exec grove init clone file://$WORK/testrepo test-output-sanitized --branches feat/user-auth
stdout 'Creating worktrees:'
stdout '  ✓ feat-user-auth'
exists test-output-sanitized/feat-user-auth

# Test clone with --verbose flag shows git output
mkdir test-output-verbose
exec grove init clone file://$WORK/testrepo test-output-verbose --branches master --verbose
stdout 'Creating worktrees:'
stdout '  ✓ master'
# Note: Can't test git verbose output in script tests as it's environment dependent

# Test clone error output remains visible in quiet mode
mkdir test-error-output
! exec grove init clone file:///nonexistent/repo.git test-error-output
stderr 'failed to clone repository'

# =============================================================================
# grove init convert command tests
# =============================================================================

# Test init convert command help
exec grove init convert --help
stdout 'convert'

# Test init convert fails when not a git repository
mkdir not-git-repo
cd not-git-repo
! exec grove init convert
stderr 'Current directory is not a Git repository'
cd ..

# Test init convert fails when already grove workspace
mkdir already-grove
exec grove init new already-grove
cd already-grove
! exec grove init convert
stderr 'Current directory is already a Grove workspace'
cd ..

# Test basic init convert success
mkdir convert-basic
cd convert-basic
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec grove init convert
exists .bare
exists .git
exists main/test-file.txt
cd ..

# Test init convert with detached HEAD fails
mkdir convert-detached
cd convert-detached
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout HEAD~0
! exec grove init convert
stderr 'Repository is in detached HEAD state'
cd ..

# Test init convert with --branches flag
mkdir convert-branches
cd convert-branches
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com" 
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b develop
exec git checkout -b 'feat/user-auth'
exec git checkout main
exec grove init convert --branches main,develop,feat/user-auth
exists .bare
exists .git
exists main/test-file.txt
exists develop/test-file.txt
exists feat-user-auth/test-file.txt
cd ..

# Test init convert copies untracked files to worktrees
mkdir convert-untracked
cd convert-untracked
exec git init
exec git config user.name "Test"
exec git config user.email "test@example.com"
exec git config commit.gpgsign false
cp ../test-file.txt .
exec git add .
exec git commit -m 'initial commit'
exec git checkout -b develop
exec git checkout main
cp ../untracked.txt .
exec grove init convert --branches main,develop
exists main/test-file.txt
exists main/untracked.txt
exists develop/test-file.txt
exists develop/untracked.txt
cd ..

# Test init convert with no positional arguments
! exec grove init convert arg1
stderr 'accepts 0 arg'

-- existing.txt --
content

-- test-file.txt --
This is a test file

-- untracked.txt --
This file is untracked

-- README.md --
# Test Repository
This is a test repository for grove.
